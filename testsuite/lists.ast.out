Interpret program:
<sequence_statement>:
	a:
	<var statement>:
		name:nil
		val:
		<object_expression>:
			slots: 
			<method_statement>:
				name:nil?
				nargs:0
				args:0
				body:
				<expression_statement>:
					<int_expresion>:
						val:1
			<method_statement>:
				name:print
				nargs:0
				args:0
				body:
				<expression_statement>:
					<print_expression>:
						format:()
						args:
			<method_statement>:
				name:length
				nargs:0
				args:0
				body:
				<expression_statement>:
					<int_expresion>:
						val:0
			<method_statement>:
				name:append
				nargs:1
				args:
					b
				body:
				<expression_statement>:
					<ref_expression>:
						name:b
			<method_statement>:
				name:reverse
				nargs:0
				args:0
				body:
				<expression_statement>:
					<ref_expression>:
						name:this
	b:
	<sequence_statement>:
		a:
		<method_statement>:
			name:cons
			nargs:2
			args:
			a
			b
			body:
			<expression_statement>:
				<object_expression>:
					slots: 
					<var statement>:
					name:head
					val:
					<ref_expression>:
						name:a
					<var statement>:
					name:tail
					val:
					<ref_expression>:
						name:b
					<method_statement>:
						name:nil?
						nargs:0
						args:0
						body:
						<expression_statement>:
							<int_expresion>:
								val:0
					<method_statement>:
						name:print
						nargs:0
						args:0
						body:
						<sequence_statement>:
							a:
							<expression_statement>:
								<print_expression>:
									format:(~
									args:
									<slot_exp>:
										reciever:
										<ref_expression>:
											name:this
										message: head
							b:
							<sequence_statement>:
								a:
								<var statement>:
									name:rest
									val:
									<slot_exp>:
										reciever:
										<ref_expression>:
											name:this
										message: tail
								b:
								<sequence_statement>:
									a:
									<expression_statement>:
										<while_statement>:
											predicate: 
											<call_slot_expression>:
												reciever: 
												<call_slot_expression>:
													reciever: 
													<ref_expression>:
														name:rest
													message: nil?
													args: 
												message: eq
												args: 
												<int_expresion>:
													val:0
											body: 
											<sequence_statement>:
												a:
												<expression_statement>:
													<print_expression>:
														format: ~
														args:
														<slot_exp>:
															reciever:
															<ref_expression>:
																name:rest
															message: head
												b:
												<expression_statement>:
													<set_expression>:
														name:rest
														<slot_exp>:
															reciever:
															<ref_expression>:
																name:rest
															message: tail
									b:
									<expression_statement>:
										<print_expression>:
											format:)
											args:
					<method_statement>:
						name:length
						nargs:0
						args:0
						body:
						<expression_statement>:
							<call_slot_expression>:
								reciever: 
								<int_expresion>:
									val:1
								message: add
								args: 
								<call_slot_expression>:
									reciever: 
									<slot_exp>:
										reciever:
										<ref_expression>:
											name:this
										message: tail
									message: length
									args: 
					<method_statement>:
						name:append
						nargs:1
						args:
							b
						body:
						<expression_statement>:
							<call_expression>:
								name:cons
								args:
								<slot_exp>:
									reciever:
									<ref_expression>:
										name:this
									message: head
								<call_slot_expression>:
									reciever: 
									<slot_exp>:
										reciever:
										<ref_expression>:
											name:this
										message: tail
									message: append
									args: 
									<ref_expression>:
										name:b
					<method_statement>:
						name:reverse
						nargs:0
						args:0
						body:
						<expression_statement>:
							<call_slot_expression>:
								reciever: 
								<call_slot_expression>:
									reciever: 
									<slot_exp>:
										reciever:
										<ref_expression>:
											name:this
										message: tail
									message: reverse
									args: 
								message: append
								args: 
								<call_expression>:
									name:cons
									args:
									<slot_exp>:
										reciever:
										<ref_expression>:
											name:this
										message: head
									<ref_expression>:
										name:nil
		b:
		<sequence_statement>:
			a:
			<method_statement>:
				name:nl
				nargs:0
				args:
				body:
				<expression_statement>:
					<print_expression>:
						format:

						args:
			b:
			<sequence_statement>:
				a:
				<method_statement>:
					name:main
					nargs:0
					args:
					body:
					<sequence_statement>:
						a:
						<expression_statement>:
							<print_expression>:
								format:List A

								args:
						b:
						<sequence_statement>:
							a:
							<var statement>:
								name:a
								val:
								<call_expression>:
									name:cons
									args:
									<int_expresion>:
										val:1
									<call_expression>:
										name:cons
										args:
										<int_expresion>:
											val:2
										<call_expression>:
											name:cons
											args:
											<int_expresion>:
												val:3
											<call_expression>:
												name:cons
												args:
												<int_expresion>:
													val:4
												<ref_expression>:
													name:nil
							b:
							<sequence_statement>:
								a:
								<expression_statement>:
									<call_slot_expression>:
										reciever: 
										<ref_expression>:
											name:a
										message: print
										args: 
								b:
								<sequence_statement>:
									a:
									<expression_statement>:
										<call_expression>:
											name:nl
											args:
											0
									b:
									<sequence_statement>:
										a:
										<expression_statement>:
											<print_expression>:
												format:List B

												args:
										b:
										<sequence_statement>:
											a:
											<var statement>:
												name:b
												val:
												<call_expression>:
													name:cons
													args:
													<int_expresion>:
														val:10
													<call_expression>:
														name:cons
														args:
														<int_expresion>:
															val:9
														<call_expression>:
															name:cons
															args:
															<int_expresion>:
																val:8
															<call_expression>:
																name:cons
																args:
																<int_expresion>:
																	val:7
																<call_expression>:
																	name:cons
																	args:
																	<int_expresion>:
																		val:6
																	<call_expression>:
																		name:cons
																		args:
																		<int_expresion>:
																			val:5
																		<ref_expression>:
																			name:nil
											b:
											<sequence_statement>:
												a:
												<expression_statement>:
													<call_slot_expression>:
														reciever: 
														<ref_expression>:
															name:b
														message: print
														args: 
												b:
												<sequence_statement>:
													a:
													<expression_statement>:
														<call_expression>:
															name:nl
															args:
															0
													b:
													<sequence_statement>:
														a:
														<expression_statement>:
															<print_expression>:
																format:a.length() = ~

																args:
																<call_slot_expression>:
																	reciever: 
																	<ref_expression>:
																		name:a
																	message: length
																	args: 
														b:
														<sequence_statement>:
															a:
															<expression_statement>:
																<print_expression>:
																	format:b.length() = ~

																	args:
																	<call_slot_expression>:
																		reciever: 
																		<ref_expression>:
																			name:b
																		message: length
																		args: 
															b:
															<sequence_statement>:
																a:
																<var statement>:
																	name:c
																	val:
																	<call_slot_expression>:
																		reciever: 
																		<ref_expression>:
																			name:a
																		message: append
																		args: 
																		<ref_expression>:
																			name:b
																b:
																<sequence_statement>:
																	a:
																	<expression_statement>:
																		<print_expression>:
																			format:a.append(b) = 
																			args:
																	b:
																	<sequence_statement>:
																		a:
																		<expression_statement>:
																			<call_slot_expression>:
																				reciever: 
																				<ref_expression>:
																					name:c
																				message: print
																				args: 
																		b:
																		<sequence_statement>:
																			a:
																			<expression_statement>:
																				<call_expression>:
																					name:nl
																					args:
																					0
																			b:
																			<sequence_statement>:
																				a:
																				<var statement>:
																					name:ar
																					val:
																					<call_slot_expression>:
																						reciever: 
																						<ref_expression>:
																							name:a
																						message: reverse
																						args: 
																				b:
																				<sequence_statement>:
																					a:
																					<var statement>:
																						name:br
																						val:
																						<call_slot_expression>:
																							reciever: 
																							<ref_expression>:
																								name:b
																							message: reverse
																							args: 
																					b:
																					<sequence_statement>:
																						a:
																						<expression_statement>:
																							<print_expression>:
																								format:a reversed = 
																								args:
																						b:
																						<sequence_statement>:
																							a:
																							<expression_statement>:
																								<call_slot_expression>:
																									reciever: 
																									<ref_expression>:
																										name:ar
																									message: print
																									args: 
																							b:
																							<sequence_statement>:
																								a:
																								<expression_statement>:
																									<call_expression>:
																										name:nl
																										args:
																										0
																								b:
																								<sequence_statement>:
																									a:
																									<expression_statement>:
																										<print_expression>:
																											format:b reversed = 
																											args:
																									b:
																									<sequence_statement>:
																										a:
																										<expression_statement>:
																											<call_slot_expression>:
																												reciever: 
																												<ref_expression>:
																													name:br
																												message: print
																												args: 
																										b:
																										<expression_statement>:
																											<call_expression>:
																												name:nl
																												args:
																												0
				b:
				<expression_statement>:
					<call_expression>:
						name:main
						args:
						0

